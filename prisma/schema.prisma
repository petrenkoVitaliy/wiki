generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ArticleType {
  common
  special
}

model Language {
  id                         Int                      @default(autoincrement()) @id
  code                       String

  articleLanguages           ArticleLanguage[]              
}

model Article {
  code                       String                   @default(cuid()) @id

  enabled                    Boolean                  @default(true)
  archived                   Boolean                  @default(false)
  type                       ArticleType              @default(common)

  articleLanguages           ArticleLanguage[]

  articleCategories          ArticleCategory[] 

  updatedAt                  DateTime                 @updatedAt
  createdAt                  DateTime                 @default(now())
}

model ArticleLanguage {
  code                       String                   @default(cuid()) @id

  name                       String                   @unique
  nameCode                   String                   @unique
  enabled                    Boolean                  @default(true)
  archived                   Boolean                  @default(false)
  
  languageId                 Int         
  language                   Language                 @relation(fields: [languageId], references: [id])

  articleCode                String                     
  article                    Article                  @relation(fields: [articleCode], references: [code])

  articleVersions            ArticleVersion[]
  
  updatedAt                  DateTime                 @updatedAt
  createdAt                  DateTime                 @default(now())

  @@unique([languageId, articleCode])
}

model ArticleVersion {
  code                       String                   @default(cuid()) @id
  version                    Int                      @default(0) // trigger
  enabled                    Boolean                  @default(true)
  archived                   Boolean                  @default(false)
  actual                     Boolean?                 @default(true)

  articleLanguageCode        String         
  articleLanguage            ArticleLanguage          @relation(fields: [articleLanguageCode], references: [code])

  schemaCode                 String                   @unique
  schema                     Schema                   @relation(fields: [schemaCode], references: [code])

  updatedAt                  DateTime                 @updatedAt
  createdAt                  DateTime                 @default(now())

  @@unique([version, articleLanguageCode])
  @@unique([actual, articleLanguageCode])
}

model Schema {
  code                       String                   @default(cuid()) @id

  parentCode                 String?
  parentSchema               Schema?                  @relation("parentSchema", fields: [parentCode], references: [code])
  childSchemas               Schema[]                 @relation("parentSchema")

  articleVersion             ArticleVersion?   
  sections                   SchemasOnSections[]   

  updatedAt                  DateTime                 @updatedAt
  createdAt                  DateTime                 @default(now())
}

model Section {
  code                       String                   @default(cuid()) @id

  name                       String
  content                    String                   @db.Text()

  schemas                    SchemasOnSections[]
  
  updatedAt                  DateTime                 @updatedAt
  createdAt                  DateTime                 @default(now())
}

model SchemasOnSections {
  schema                     Schema                   @relation(fields: [schemaCode], references: [code])
  schemaCode                 String

  section                    Section                  @relation(fields: [sectionCode], references: [code])
  sectionCode                String

  order                      Int

  @@unique([order, schemaCode])
  @@id([schemaCode, sectionCode])
}

model Category {
  id                         Int                      @default(autoincrement()) @id
  name                       String                  
  description                String                  
  enabled                    Boolean                  @default(true)
  archived                   Boolean                  @default(false)

  parentId                   Int?                     
  parentCategory             Category?                @relation("parentCategory", fields: [parentId], references: [id])
  childCategories            Category[]               @relation("parentCategory")

  articleCategories          ArticleCategory[] 

  updatedAt                  DateTime                 @updatedAt
  createdAt                  DateTime                 @default(now())
}

model ArticleCategory {
  articleCode               String
  article                   Article                   @relation(fields: [articleCode], references: [code])

  categoryId                Int
  category                  Category                  @relation(fields: [categoryId], references: [id])

  @@id([articleCode, categoryId])
}